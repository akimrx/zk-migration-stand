#!/usr/bin/env python3

from socket import timeout
import time
import random
import string
import logging
import asyncio
import aiohttp

from datetime import datetime as dt


logging.basicConfig(
    level="INFO",
    datefmt="%H:%M:%S",
    format="%(asctime)s [%(levelname)s] %(message)s"
)
logger = logging.getLogger(__name__)


async def fetch(session, url, metadata):
    try:
        async with session.post(url, verify_ssl=False, timeout=1) as response:
            msg = await response.text()
            try:
                assert response.status == 200
            except AssertionError:
                logger.warning(f"{msg.rstrip()} ({metadata})")
            else:
                logger.info(f"Successfully written data to the ClickHouse ({metadata})")
    except Exception as err:
        logger.error(err)


async def insert_into_clickhouse(port: int = 8123):
    date = dt.now().strftime("%Y-%m-%d %H:%M:%S")
    text = "".join(random.choice(string.ascii_letters) for _ in range(20))
    query = f"INSERT INTO testing.sample(Text, EventDate, ver) VALUES ('{text}', '{date}', 1);"
    url = f"http://localhost:{port}/?user=default&query={query}"

    metadata = f"PORT: {port}"

    async with aiohttp.ClientSession() as session:
        await fetch(session, url, metadata)


async def inserts():
    queries = [insert_into_clickhouse(port) for port in (8121, 8122, 8123, 8124)]
    await asyncio.wait(queries)


def main():
    loop = asyncio.get_event_loop()
    try:
        while True:
            loop.run_until_complete(inserts())
            time.sleep(5)
    except Exception as e:
        logger.error(e)
    finally:
        loop.close()


if __name__ == '__main__':
    main()
